// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// No password field b/c we will use googleAuth
model User {
  id              String  @id @default(cuid())
  firstName       String
  lastName        String?
  email           String  @unique
  profileImageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followers Follows[] @relation("follower")
  following Follows[] @relation("following")

  posts Post[]
  likes Like[]
  comments Comment[]
  commentLikes CommentLike[]
  bookmarks Bookmark[]
}

model Post {
  id       String  @id @default(cuid())
  content  String
  imageURL String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes Like[] 
  comments Comment[]
  bookmarks Bookmark[]
}

model Like {
  id      String @id @default(cuid())
  userId  String
  postId  String

  user    User @relation(fields: [userId], references: [id])
  post    Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id      String @id @default(cuid())
  content String

  userId  String
  user    User @relation(fields: [userId], references: [id])
  
  postId  String
  post    Post @relation(fields: [postId], references: [id])

  commentLikes CommentLike[]

  createdAt DateTime @default(now())
}

model CommentLike {
  id      String @id @default(cuid())
  userId  String
  commentId  String

  user    User @relation(fields: [userId], references: [id])
  comment    Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

model Bookmark {
  id      String @id @default(cuid())
  userId  String
  postId  String

  user    User @relation(fields: [userId], references: [id])
  post    Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}


