generator client {
  provider        = "prisma-client-js"
  // output          = "./generated/client"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String        @id @default(cuid())
  firstName       String
  lastName        String?
  email           String        @unique
  profileImageUrl String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bookmarks       Bookmark[]
  comments        Comment[]
  commentLikes    CommentLike[]
  followers       Follows[]     @relation("follower")
  following       Follows[]     @relation("following")
  likes           Like[]
  posts           Post[]
}

model Post {
  id        String     @id @default(cuid())
  content   String
  imageURL  String?
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookmarks Bookmark[]
  comments  Comment[]
  likes     Like[]
  author    User       @relation(fields: [authorId], references: [id])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id           String        @id @default(cuid())
  content      String
  userId       String
  postId       String
  createdAt    DateTime      @default(now())
  post         Post          @relation(fields: [postId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  commentLikes CommentLike[]
}

model CommentLike {
  id        String  @id @default(cuid())
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}
